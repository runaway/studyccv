---- ccv_array_get Matches (254 in 37 files) ----
Bbf.c (serve):			ccv_comp_t* comp = (ccv_comp_t*)ccv_array_get(seq, i);
Bbfdetect.c (bin):			ccv_comp_t* comp = (ccv_comp_t*)ccv_array_get(seq, i);
Bbfdetect.c (bin):					ccv_comp_t* comp = (ccv_comp_t*)ccv_array_get(seq, i);
Ccv.h (lib):#define ccv_array_get(a, i) (((char*)((a)->data)) + (size_t)(a)->rsize * (size_t)(i))
Ccv_bbf.c (lib):				ccv_rect_t* rect = (ccv_rect_t*)ccv_array_get(detected, r);
Ccv_bbf.c (lib):					rect = (ccv_rect_t*)ccv_array_get(detected, r);
Ccv_bbf.c (lib):				ccv_comp_t* comp = (ccv_comp_t*)ccv_array_get(seq, i);
Ccv_bbf.c (lib):				ccv_comp_t r1 = *(ccv_comp_t*)ccv_array_get(seq, i);
Ccv_bbf.c (lib):				int idx = *(int*)ccv_array_get(idx_seq, i);
Ccv_bbf.c (lib):				ccv_comp_t r1 = *(ccv_comp_t*)ccv_array_get(seq2, i);
Ccv_bbf.c (lib):					ccv_comp_t r2 = *(ccv_comp_t*)ccv_array_get(seq2, j);
Ccv_bbf.c (lib):			ccv_comp_t r1 = *(ccv_comp_t*)ccv_array_get(result_seq, i);
Ccv_bbf.c (lib):			int idx = *(int*)ccv_array_get(idx_seq, i);
Ccv_classic.c (lib):		ccv_decimal_point_with_status_t* point_with_status = (ccv_decimal_point_with_status_t*)ccv_array_get(seq, i);
Ccv_classic.c (lib):			ccv_decimal_point_t prev_point = *(ccv_decimal_point_t*)ccv_array_get(point_a, i);
Ccv_classic.c (lib):			ccv_decimal_point_with_status_t* point_with_status = (ccv_decimal_point_with_status_t*)ccv_array_get(seq, i);
Ccv_convnet.c (lib):			ccv_categorized_t* categorized = (ccv_categorized_t*)ccv_array_get(categorizeds, idx[i]);
Ccv_convnet.c (lib):			ccv_categorized_t* test = (ccv_categorized_t*)ccv_array_get(tests, i);
Ccv_convnet.c (lib):			convnet = ccv_convnet_new(use_cwc_accel, input, (ccv_convnet_layer_param_t*)ccv_array_get(layer_params, 0), layer_params->rnum);
Ccv_dpm.c (lib):			ccv_dense_matrix_t* hog = ((ccv_dpm_feature_vector_t*)ccv_array_get(posex, i))->root.w;
Ccv_dpm.c (lib):			ccv_dense_matrix_t* hog = ((ccv_dpm_feature_vector_t*)ccv_array_get(negex, i))->root.w;
Ccv_dpm.c (lib):				ccv_array_push(av, ccv_array_get(at, j));
Ccv_dpm.c (lib):		ccv_dpm_feature_vector_t* v = *(ccv_dpm_feature_vector_t**)ccv_array_get(negv, i);
Ccv_dpm.c (lib):				ccv_dpm_feature_vector_t* v = (ccv_dpm_feature_vector_t*)ccv_array_get(posex[k], i);
Ccv_dpm.c (lib):							ccv_dpm_feature_vector_t* v = (ccv_dpm_feature_vector_t*)ccv_array_get(posex[label[k]], k);
Ccv_dpm.c (lib):							ccv_dpm_feature_vector_t* v = (ccv_dpm_feature_vector_t*)ccv_array_get(negex[label[k]], k - posnum);
Ccv_dpm.c (lib):				ccv_dpm_feature_vector_t* v = (ccv_dpm_feature_vector_t*)ccv_array_get(posex[label[i]], i);
Ccv_dpm.c (lib):				ccv_dpm_feature_vector_t* v = (ccv_dpm_feature_vector_t*)ccv_array_get(negex[label[i + posnum]], i);
Ccv_dpm.c (lib):				_ccv_dpm_feature_vector_cleanup((ccv_dpm_feature_vector_t*)ccv_array_get(posex[i], j));
Ccv_dpm.c (lib):				_ccv_dpm_feature_vector_cleanup((ccv_dpm_feature_vector_t*)ccv_array_get(negex[i], j));
Ccv_dpm.c (lib):					ccv_dpm_feature_vector_t* v = *(ccv_dpm_feature_vector_t**)ccv_array_get(negv, j);
Ccv_dpm.c (lib):				ccv_dpm_feature_vector_t* v = *(ccv_dpm_feature_vector_t**)ccv_array_get(negv, i);
Ccv_dpm.c (lib):							ccv_dpm_feature_vector_t* v = *(ccv_dpm_feature_vector_t**)ccv_array_get(negv, k - posnum);
Ccv_dpm.c (lib):					ccv_dpm_feature_vector_t* v = *(ccv_dpm_feature_vector_t**)ccv_array_get(negv, i);
Ccv_dpm.c (lib):			ccv_dpm_feature_vector_t* v = *(ccv_dpm_feature_vector_t**)ccv_array_get(negv, i);
Ccv_dpm.c (lib):				ccv_root_comp_t* comp = (ccv_root_comp_t*)ccv_array_get(seq, i);
Ccv_dpm.c (lib):				ccv_root_comp_t r1 = *(ccv_root_comp_t*)ccv_array_get(seq, i);
Ccv_dpm.c (lib):				int idx = *(int*)ccv_array_get(idx_seq, i);
Ccv_dpm.c (lib):				ccv_root_comp_t* r2 = (ccv_root_comp_t*)ccv_array_get(seq2, i);
Ccv_dpm.c (lib):					ccv_root_comp_t r1 = *(ccv_root_comp_t*)ccv_array_get(seq2, j);
Ccv_dpm.c (lib):				ccv_root_comp_t r1 = *(ccv_root_comp_t*)ccv_array_get(seq2, i);
Ccv_dpm.c (lib):						ccv_root_comp_t r2 = *(ccv_root_comp_t*)ccv_array_get(seq2, j);
Ccv_dpm.c (lib):			ccv_root_comp_t r1 = *(ccv_root_comp_t*)ccv_array_get(result_seq, i);
Ccv_dpm.c (lib):			int idx = *(int*)ccv_array_get(idx_seq, i);
Ccv_icf.c (lib):			ccv_dense_matrix_t* a = (ccv_dense_matrix_t*)ccv_array_get(state->positives, i);
Ccv_icf.c (lib):			ccv_dense_matrix_t* a = (ccv_dense_matrix_t*)ccv_array_get(state->negatives, i);
Ccv_icf.c (lib):		ccv_dense_matrix_t* a = (ccv_dense_matrix_t*)ccv_array_get(i < positives->rnum ? positives : negatives, i < positives->rnum ? i : i - positives->rnum);
Ccv_icf.c (lib):	ccv_dense_matrix_t* a = (ccv_dense_matrix_t*)ccv_array_get(b[0] < positives->rnum ? positives : negatives, b[0] < positives->rnum ? b[0] : b[0] - positives->rnum);
Ccv_icf.c (lib):	a = (ccv_dense_matrix_t*)ccv_array_get(b[1] < positives->rnum ? positives : negatives, b[1] < positives->rnum ? b[1] : b[1] - positives->rnum);
Ccv_icf.c (lib):		ccv_file_info_t* file_info = (ccv_file_info_t*)ccv_array_get(validatefiles, i);
Ccv_icf.c (lib):			ccv_file_info_t* file_info = (ccv_file_info_t*)ccv_array_get(posfiles, j);
Ccv_icf.c (lib):		ccv_dense_matrix_t* a = (ccv_dense_matrix_t*)(ccv_array_get(positives, i));
Ccv_icf.c (lib):			ccv_file_info_t* file_info = (ccv_file_info_t*)ccv_array_get(bgfiles, j);
Ccv_icf.c (lib):					gsl_ran_shuffle(crng, ccv_array_get(seq, 0), seq->rnum, seq->rsize);
Ccv_icf.c (lib):						ccv_point_with_sum_t* point = (ccv_point_with_sum_t*)ccv_array_get(seq, p);
Ccv_icf.c (lib):			ccv_file_info_t* file_info = (ccv_file_info_t*)ccv_array_get(bgfiles, j);
Ccv_icf.c (lib):		ccv_dense_matrix_t* a = (ccv_dense_matrix_t*)ccv_array_get(i < positives->rnum ? positives : negatives, i < positives->rnum ? i : i - positives->rnum);
Ccv_icf.c (lib):				ccv_comp_t* comp = (ccv_comp_t*)ccv_array_get(seq[k], i);
Ccv_icf.c (lib):				ccv_comp_t r1 = *(ccv_comp_t*)ccv_array_get(seq[k], i);
Ccv_icf.c (lib):				int idx = *(int*)ccv_array_get(idx_seq, i);
Ccv_icf.c (lib):				ccv_comp_t* r2 = (ccv_comp_t*)ccv_array_get(seq2, i);
Ccv_icf.c (lib):					ccv_comp_t r1 = *(ccv_comp_t*)ccv_array_get(seq2, j);
Ccv_icf.c (lib):				ccv_comp_t r1 = *(ccv_comp_t*)ccv_array_get(seq2, i);
Ccv_icf.c (lib):						ccv_comp_t r2 = *(ccv_comp_t*)ccv_array_get(seq2, j);
Ccv_mser.c (lib):						ccv_mser_history_t* root0 = (node0->root >= 0) ? (ccv_mser_history_t*)ccv_array_get(history_list, node0->root) : 0;
Ccv_mser.c (lib):						ccv_mser_history_t* root1 = (node1->root >= 0) ? (ccv_mser_history_t*)ccv_array_get(history_list, node1->root) : 0;
Ccv_mser.c (lib):							root0 = (ccv_mser_history_t*)ccv_array_get(history_list, history_list->rnum - 1);
Ccv_mser.c (lib):							root0 = (ccv_mser_history_t*)ccv_array_get(history_list, history_list->rnum - 1);
Ccv_mser.c (lib):							root1 = (node1->root >= 0) ? (ccv_mser_history_t*)ccv_array_get(history_list, node1->root) : 0; // the memory may be reallocated
Ccv_mser.c (lib):		ccv_mser_history_t* er = (ccv_mser_history_t*)ccv_array_get(history_list, i);
Ccv_mser.c (lib):		ccv_mser_history_t* er = (ccv_mser_history_t*)ccv_array_get(history_list, i);
Ccv_mser.c (lib):			ccv_mser_history_t* ter = (ccv_mser_history_t*)ccv_array_get(history_list, top);
Ccv_mser.c (lib):			ccv_mser_history_t* ner = (ccv_mser_history_t*)ccv_array_get(history_list, next);
Ccv_mser.c (lib):		ccv_mser_history_t* ter = (ccv_mser_history_t*)ccv_array_get(history_list, top);
Ccv_mser.c (lib):		ccv_mser_history_t* ner = (ccv_mser_history_t*)ccv_array_get(history_list, er->parent);
Ccv_mser.c (lib):		ccv_mser_history_t* er = (ccv_mser_history_t*)ccv_array_get(history_list, i);
Ccv_mser.c (lib):		ccv_mser_history_t* per = (ccv_mser_history_t*)ccv_array_get(history_list, er->parent);
Ccv_mser.c (lib):		ccv_mser_history_t* er = (ccv_mser_history_t*)ccv_array_get(history_list, i);
Ccv_mser.c (lib):		ccv_mser_history_t* per = (ccv_mser_history_t*)ccv_array_get(history_list, er->parent);
Ccv_mser.c (lib):				ccv_mser_history_t* ner = (ccv_mser_history_t*)ccv_array_get(history_list, per->parent);
Ccv_mser.c (lib):		ccv_mser_history_t* er = (ccv_mser_history_t*)ccv_array_get(history_list, i); \
Ccv_mser.c (lib):				ccv_mscr_root_t* root0 = (node0->root >= 0) ? (ccv_mscr_root_t*)ccv_array_get(mscr_root_list, node0->root) : 0;
Ccv_mser.c (lib):				ccv_mscr_root_t* root1 = (node1->root >= 0) ? (ccv_mscr_root_t*)ccv_array_get(mscr_root_list, node1->root) : 0;
Ccv_mser.c (lib):					root0 = (ccv_mscr_root_t*)ccv_array_get(mscr_root_list, mscr_root_list->rnum - 1);
Ccv_mser.c (lib):					root1 = (node1->root >= 0) ? (ccv_mscr_root_t*)ccv_array_get(mscr_root_list, node1->root) : 0; // the memory may be reallocated
Ccv_mser.c (lib):						ccv_mscr_area_t* mscr_area = (ccv_mscr_area_t*)ccv_array_get(mscr_area_list, root0->mscr_area);
Ccv_mser.c (lib):							ccv_mscr_area_t* last_mscr_area = (root0->last_mscr_area >= 0) ? (ccv_mscr_area_t*)ccv_array_get(mscr_area_list, root0->last_mscr_area) : 0;
Ccv_mser.c (lib):									ccv_mscr_area_t* mscr_area = (ccv_mscr_area_t*)ccv_array_get(mscr_area_list, root0->mscr_area);
Ccv_mser.c (lib):		ccv_mscr_area_t* mscr_area = (ccv_mscr_area_t*)ccv_array_get(mscr_area_list, i); \
Ccv_scd.c (lib):			ccv_file_info_t* file_info = (ccv_file_info_t*)ccv_array_get(hard_mine, j);
Ccv_scd.c (lib):		ccv_file_info_t* file_info = (ccv_file_info_t*)ccv_array_get(posfiles, i);
Ccv_scd.c (lib):		ccv_dense_matrix_t* a = (ccv_dense_matrix_t*)ccv_array_get(positives, i);
Ccv_scd.c (lib):			ccv_scd_stump_feature_t* feature = (ccv_scd_stump_feature_t*)ccv_array_get(features, j);
Ccv_scd.c (lib):		ccv_dense_matrix_t* a = (ccv_dense_matrix_t*)ccv_array_get(negatives, i);
Ccv_scd.c (lib):			ccv_scd_stump_feature_t* feature = (ccv_scd_stump_feature_t*)ccv_array_get(features, j);
Ccv_scd.c (lib):		ccv_scd_stump_feature_t* feature = (ccv_scd_stump_feature_t*)ccv_array_get(features, i);
Ccv_scd.c (lib):		ccv_scd_stump_feature_t* feature = (ccv_scd_stump_feature_t*)ccv_array_get(features, i);
Ccv_scd.c (lib):		ccv_scd_stump_feature_t* feature = (ccv_scd_stump_feature_t*)ccv_array_get(features, i);
Ccv_scd.c (lib):		ccv_dense_matrix_t* a = (ccv_dense_matrix_t*)ccv_array_get(negatives, i);
Ccv_scd.c (lib):			ccv_file_info_t* file_info = (ccv_file_info_t*)ccv_array_get(hard_mine, i);
Ccv_scd.c (lib):					ccv_rect_t* rect = (ccv_rect_t*)ccv_array_get(objects, j);
Ccv_scd.c (lib):			ccv_scd_stump_feature_t best_feature = *(ccv_scd_stump_feature_t*)ccv_array_get(z.features, best_feature_no);
Ccv_scd.c (lib):				ccv_dense_matrix_t* a = (ccv_dense_matrix_t*)ccv_array_get(z.positives, i);
Ccv_scd.c (lib):				ccv_comp_t* comp = (ccv_comp_t*)ccv_array_get(seq[k], i);
Ccv_scd.c (lib):				ccv_comp_t r1 = *(ccv_comp_t*)ccv_array_get(seq[k], i);
Ccv_scd.c (lib):				int idx = *(int*)ccv_array_get(idx_seq, i);
Ccv_sift.c (lib):		ccv_keypoint_t* kp = (ccv_keypoint_t*)ccv_array_get(keypoints, i);
Ccv_sift.c (lib):			ccv_keypoint_t* kp = (ccv_keypoint_t*)ccv_array_get(keypoints, i);
Ccv_swt.c (lib):	_ccv_swt_stroke_qsort((ccv_swt_stroke_t*)ccv_array_get(strokes, 0), strokes->rnum, 0); \
Ccv_swt.c (lib):		ccv_swt_stroke_t* stroke = (ccv_swt_stroke_t*)ccv_array_get(strokes, i); \
Ccv_swt.c (lib):		ccv_contour_t* contour = *(ccv_contour_t**)ccv_array_get(contours, i);
Ccv_swt.c (lib):			ccv_point_t* point = (ccv_point_t*)ccv_array_get(contour->set, j);
Ccv_swt.c (lib):		ccv_letter_t* letter = (ccv_letter_t*)ccv_array_get(letters, i);
Ccv_swt.c (lib):			ccv_point_t* point = (ccv_point_t*)ccv_array_get(letter->contour->set, j);
Ccv_swt.c (lib):		ccv_letter_t* letter = (ccv_letter_t*)ccv_array_get(letters, i);
Ccv_swt.c (lib):			ccv_point_t* point = (ccv_point_t*)ccv_array_get(letter->contour->set, j);
Ccv_swt.c (lib):		ccv_letter_t* li = (ccv_letter_t*)ccv_array_get(letters, i);
Ccv_swt.c (lib):			ccv_letter_t* lj = (ccv_letter_t*)ccv_array_get(letters, j);
Ccv_swt.c (lib):		j = *(int*)ccv_array_get(idx, i);
Ccv_swt.c (lib):		_ccv_swt_add_letter(chain + j,((ccv_letter_pair_t*)ccv_array_get(pairs, i))->left);
Ccv_swt.c (lib):		_ccv_swt_add_letter(chain + j, ((ccv_letter_pair_t*)ccv_array_get(pairs, i))->right);
Ccv_swt.c (lib):		ccv_textline_t* t = (ccv_textline_t*)ccv_array_get(textline, i);
Ccv_swt.c (lib):		ccv_textline_t* t = (ccv_textline_t*)ccv_array_get(textline, i);
Ccv_swt.c (lib):			ccv_array_push(textline, ccv_array_get(textline2, i));
Ccv_swt.c (lib):				ccv_textline_t* r = (ccv_textline_t*)ccv_array_get(textline, i);
Ccv_swt.c (lib):				int k = *(int*)ccv_array_get(idx, i);
Ccv_swt.c (lib):				ccv_textline_t* r2 = (ccv_textline_t*)ccv_array_get(textline2, k);
Ccv_swt.c (lib):				ccfree(((ccv_textline_t*)ccv_array_get(textline2, i))->letters);
Ccv_swt.c (lib):				ccv_textline_t* r = (ccv_textline_t*)ccv_array_get(textline, i);
Ccv_swt.c (lib):				int k = *(int*)ccv_array_get(idx, i);
Ccv_swt.c (lib):				ccv_rect_t* r2 = (ccv_rect_t*)ccv_array_get(words, k);
Ccv_swt.c (lib):				ccv_rect_t* rect = (ccv_rect_t*)ccv_array_get(words, i);
Ccv_swt.c (lib):			ccv_rect_t* r1 = (ccv_rect_t*)ccv_array_get(all_words, i);
Ccv_swt.c (lib):			int k = *(int*)ccv_array_get(idx, i);
Ccv_swt.c (lib):			ccv_comp_t* r2 = (ccv_comp_t*)ccv_array_get(new_words, k);
Ccv_swt.c (lib):				ccv_comp_t* comp = (ccv_comp_t*)ccv_array_get(new_words, i);
Ccv_tld.c (lib):		ccv_decimal_point_t* p0 = (ccv_decimal_point_t*)ccv_array_get(point_a, i);
Ccv_tld.c (lib):		ccv_decimal_point_with_status_t* p1 = (ccv_decimal_point_with_status_t*)ccv_array_get(point_b, i);
Ccv_tld.c (lib):		ccv_decimal_point_with_status_t* p2 = (ccv_decimal_point_with_status_t*)ccv_array_get(point_c, i);
Ccv_tld.c (lib):		ccv_decimal_point_t* p0 = (ccv_decimal_point_t*)ccv_array_get(point_a, wrt[i]);
Ccv_tld.c (lib):		ccv_decimal_point_t* p1 = (ccv_decimal_point_t*)ccv_array_get(point_b, wrt[i]);
Ccv_tld.c (lib):			ccv_decimal_point_t* p0i = (ccv_decimal_point_t*)ccv_array_get(point_a, wrt[i]);
Ccv_tld.c (lib):			ccv_decimal_point_t* p1i = (ccv_decimal_point_t*)ccv_array_get(point_b, wrt[i]);
Ccv_tld.c (lib):				ccv_decimal_point_t* p0j = (ccv_decimal_point_t*)ccv_array_get(point_a, wrt[j]);
Ccv_tld.c (lib):				ccv_decimal_point_t* p1j = (ccv_decimal_point_t*)ccv_array_get(point_b, wrt[j]);
Ccv_tld.c (lib):		ccv_comp_t* smallest_comp = (ccv_comp_t*)ccv_array_get(good, smallest);
Ccv_tld.c (lib):			ccv_comp_t* left_comp = (ccv_comp_t*)ccv_array_get(good, left);
Ccv_tld.c (lib):			ccv_comp_t* right_comp = (ccv_comp_t*)ccv_array_get(good, right);
Ccv_tld.c (lib):		ccv_comp_t c = *(ccv_comp_t*)ccv_array_get(good, smallest);
Ccv_tld.c (lib):		*(ccv_comp_t*)ccv_array_get(good, smallest) = *(ccv_comp_t*)ccv_array_get(good, i);
Ccv_tld.c (lib):		*(ccv_comp_t*)ccv_array_get(good, i) = c;
Ccv_tld.c (lib):		ccv_comp_t* parent_comp = (ccv_comp_t*)ccv_array_get(good, parent);
Ccv_tld.c (lib):		ccv_comp_t* smallest_comp = (ccv_comp_t*)ccv_array_get(good, smallest);
Ccv_tld.c (lib):		ccv_comp_t c = *(ccv_comp_t*)ccv_array_get(good, smallest);
Ccv_tld.c (lib):		*(ccv_comp_t*)ccv_array_get(good, smallest) = *(ccv_comp_t*)ccv_array_get(good, one);
Ccv_tld.c (lib):		*(ccv_comp_t*)ccv_array_get(good, one) = c;
Ccv_tld.c (lib):			ccv_comp_t* other_comp = (ccv_comp_t*)ccv_array_get(good, other);
Ccv_tld.c (lib):				ccv_comp_t* p = (ccv_comp_t*)ccv_array_get(agood, 0);
Ccv_tld.c (lib):					*(ccv_comp_t*)ccv_array_get(agood, 0) = comp;
Ccv_tld.c (lib):		ccv_dense_matrix_t* b = *(ccv_dense_matrix_t**)ccv_array_get(tld->sv[1], i);
Ccv_tld.c (lib):		ccv_dense_matrix_t* b = *(ccv_dense_matrix_t**)ccv_array_get(tld->sv[0], i);
Ccv_tld.c (lib):		ccv_comp_t* box = (ccv_comp_t*)ccv_array_get(bad, i);
Ccv_tld.c (lib):		ccv_comp_t* box = (ccv_comp_t*)ccv_array_get(bad, i);
Ccv_tld.c (lib):	sfmt_genrand_shuffle(sfmt, ccv_array_get(bad, 0), bad->rnum, bad->rsize);
Ccv_tld.c (lib):			ccv_comp_t box = *(ccv_comp_t*)ccv_array_get(good, j);
Ccv_tld.c (lib):				ccv_comp_t* box = (ccv_comp_t*)ccv_array_get(bad, k);
Ccv_tld.c (lib):				ccv_comp_t* box = (ccv_comp_t*)ccv_array_get(good, k - badex);
Ccv_tld.c (lib):		ccv_comp_t* box = (ccv_comp_t*)ccv_array_get(bad, i);
Ccv_tld.c (lib):				ccv_comp_t box = *(ccv_comp_t*)ccv_array_get(good, j);
Ccv_tld.c (lib):		sfmt_genrand_shuffle(sfmt, ccv_array_get(bad, 0), bad->rnum, bad->rsize);
Ccv_tld.c (lib):					ccv_comp_t *box = (ccv_comp_t*)ccv_array_get(bad, k);
Ccv_tld.c (lib):					ccv_comp_t *box = (ccv_comp_t*)ccv_array_get(good, k - badex);
Ccv_tld.c (lib):			ccv_comp_t* box = (ccv_comp_t*)ccv_array_get(tld->top, i);
Ccv_tld.c (lib):		sfmt_genrand_shuffle(sfmt, ccv_array_get(tld->sv[0], 0), tld->sv[0]->rnum, sizeof(ccv_dense_matrix_t*));
Ccv_tld.c (lib):		sfmt_genrand_shuffle(sfmt, ccv_array_get(tld->sv[1], 0), tld->sv[1]->rnum, sizeof(ccv_dense_matrix_t*));
Ccv_tld.c (lib):					ccv_comp_t* top_box = (ccv_comp_t*)ccv_array_get(tld->top, 0);
Ccv_tld.c (lib):						*(ccv_comp_t*)ccv_array_get(tld->top, 0) = box;
Ccv_tld.c (lib):		ccv_comp_t* box = (ccv_comp_t*)ccv_array_get(tld->top, i);
Ccv_tld.c (lib):			ccv_comp_t r1 = *(ccv_comp_t*)ccv_array_get(dd, i);
Ccv_tld.c (lib):			int idx = *(int*)ccv_array_get(idx_dd, i);
Ccv_tld.c (lib):				ccv_comp_t* comp = (ccv_comp_t*)ccv_array_get(dd, i);
Ccv_tld.c (lib):					ccv_comp_t* comp = (ccv_comp_t*)ccv_array_get(dd, i);
Ccv_tld.c (lib):		result = *(ccv_comp_t*)ccv_array_get(dd, 0);
Ccv_tld.c (lib):		ccv_matrix_free(*(ccv_dense_matrix_t**)ccv_array_get(tld->sv[0], i));
Ccv_tld.c (lib):		ccv_matrix_free(*(ccv_dense_matrix_t**)ccv_array_get(tld->sv[1], i));
Ccv_util.c (lib):	memcpy(ccv_array_get(array, array->rnum - 1), r, array->rsize);
Ccv_util.c (lib):		node[i].element = ccv_array_get(array, i);
Cnnclassify.c (bin):			ccv_classification_t* classification = (ccv_classification_t*)ccv_array_get(rank, i);
Cnnclassify.c (bin):		ccv_classification_t* classification = (ccv_classification_t*)ccv_array_get(rank, rank->rnum - 1);
Cnnclassify.c (bin):							ccv_classification_t* classification = (ccv_classification_t*)ccv_array_get(ranks[i], j);
Cnnclassify.c (bin):						ccv_classification_t* classification = (ccv_classification_t*)ccv_array_get(ranks[i], ranks[i]->rnum - 1);
Cnnclassify.c (bin):						ccv_classification_t* classification = (ccv_classification_t*)ccv_array_get(ranks[i], j);
Cnnclassify.c (bin):					ccv_classification_t* classification = (ccv_classification_t*)ccv_array_get(ranks[i], ranks[i]->rnum - 1);
Convnet.c (serve):			char* word = (char*)ccv_array_get(convnet_context->image_net[i].words, j);
Convnet.c (serve):		ccv_classification_t* classification = (ccv_classification_t*)ccv_array_get(rank, i);
Convnet.c (serve):		char* word = *(char**)ccv_array_get(parser->convnet_and_words->words, classification->id);
Cwc-bench.c (bin\cuda):		ccv_categorized_t* categorized = (ccv_categorized_t*)ccv_array_get(categorizeds, i);
Cwc-verify.c (bin\cuda):		ccv_categorized_t* categorized = (ccv_categorized_t*)ccv_array_get(categorizeds, i);
Cwc_convnet_helper.c (lib\cuda):		ccv_categorized_t* categorized = (ccv_categorized_t*)ccv_array_get(categorizeds, idx ? idx[offset + i] : offset + i);
Cwc_convnet_helper.c (lib\cuda):		ccv_categorized_t* categorized = (ccv_categorized_t*)ccv_array_get(categorizeds, i);
Cwc_convnet_helper.c (lib\cuda):		ccv_categorized_t* categorized = (ccv_categorized_t*)ccv_array_get(categorizeds, c);
Dpm.c (serve):			ccv_root_comp_t* comp = (ccv_root_comp_t*)ccv_array_get(seq, i);
Dpmdetect.c (bin):				ccv_root_comp_t* comp = (ccv_root_comp_t*)ccv_array_get(seq, i);
Dpmdetect.c (bin):						ccv_root_comp_t* comp = (ccv_root_comp_t*)ccv_array_get(seq, i);
Icf.c (serve):			ccv_comp_t* comp = (ccv_comp_t*)ccv_array_get(seq, i);
Icfcreate.c (bin):		ccv_file_info_t* file_info = (ccv_file_info_t*)ccv_array_get(posfiles, i);
Icfcreate.c (bin):		ccv_file_info_t* file_info = (ccv_file_info_t*)ccv_array_get(bgfiles, i);
Icfcreate.c (bin):		ccv_file_info_t* file_info = (ccv_file_info_t*)ccv_array_get(validatefiles, i);
Icfdetect.c (bin):			ccv_comp_t* comp = (ccv_comp_t*)ccv_array_get(seq, i);
Icfdetect.c (bin):					ccv_comp_t* comp = (ccv_comp_t*)ccv_array_get(seq, i);
Icfoptimize.c (bin):		ccv_file_info_t* file_info = (ccv_file_info_t*)ccv_array_get(posfiles, i);
Memory.tests.c (test\unit):		if (i == *(int*)ccv_array_get(array, 0) &&
Memory.tests.c (test\unit):			0 == *(int*)ccv_array_get(array, 1) &&
Memory.tests.c (test\unit):			~i == *(int*)ccv_array_get(array, 2) &&
Memory.tests.c (test\unit):			-i == *(int*)ccv_array_get(array, 3))
Scd.c (serve):			ccv_comp_t* comp = (ccv_comp_t*)ccv_array_get(seq, i);
Scddetect.c (bin):			ccv_comp_t* comp = (ccv_comp_t*)ccv_array_get(seq, i);
Scddetect.c (bin):					ccv_comp_t* comp = (ccv_comp_t*)ccv_array_get(seq, i);
Section-001-002.c (site\_source):		ccv_comp_t* face = (ccv_comp_t*)ccv_array_get(faces, i);
Sift.c (serve):			ccv_keypoint_t* keypoint = (ccv_keypoint_t*)ccv_array_get(keypoints, i);
Siftmatch.c (bin):			ccv_keypoint_t* op = (ccv_keypoint_t*)ccv_array_get(obj_keypoints, i);
Siftmatch.c (bin):			ccv_keypoint_t* kp = (ccv_keypoint_t*)ccv_array_get(image_keypoints, minj);
Swt.c (serve):			ccv_rect_t* rect = (ccv_rect_t*)ccv_array_get(seq, i);
Swtcreate.c (bin):		ccv_rect_t* rect = (ccv_rect_t*)ccv_array_get(truth, j);
Swtcreate.c (bin):			ccv_rect_t* target = (ccv_rect_t*)ccv_array_get(words, k);
Swtcreate.c (bin):		ccv_rect_t* rect = (ccv_rect_t*)ccv_array_get(truth, j);
Swtcreate.c (bin):			ccv_rect_t* target = (ccv_rect_t*)ccv_array_get(words, k);
Swtcreate.c (bin):			char* name = *(char**)ccv_array_get(aof, j); \
Swtcreate.c (bin):			ccv_array_t* truth = *(ccv_array_t**)ccv_array_get(aow, j); \
Swtcreate.c (bin):		char* name = *(char**)ccv_array_get(aof, i);
Swtcreate.c (bin):		ccv_array_t* cw = *(ccv_array_t**)ccv_array_get(aow, i);
Swtdetect.c (bin):				ccv_rect_t* rect = (ccv_rect_t*)ccv_array_get(words, i);
Swtdetect.c (bin):					ccv_rect_t* rect = (ccv_rect_t*)ccv_array_get(words, i);
Tld.c (bin):			ccv_comp_t* comp = &newbox; // (ccv_comp_t*)ccv_array_get(tld->top, i);
Tld.c (serve):			ccv_thread_safe_tld_t* tld = (ccv_thread_safe_tld_t*)ccv_array_get(tld_context->tlds, i);
Tld.c (serve):		*(ccv_thread_safe_tld_t*)ccv_array_get(tld_context->tlds, tld_ident) = thread_safe_tld; // set the real tld pointer
Tld.c (serve):			thread_safe_tld = *(ccv_thread_safe_tld_t*)ccv_array_get(tld_context->tlds, parser->uri_params.tld);
Tld.c (serve):		thread_safe_tld = *(ccv_thread_safe_tld_t*)ccv_array_get(tld_context->tlds, parser->uri_params.tld);
Tld.c (serve):		*(ccv_thread_safe_tld_t*)ccv_array_get(tld_context->tlds, parser->uri_params.tld) = dummy_tld;
Util.tests.c (test\unit):		REQUIRE_EQ(i + 1, ((int*)ccv_array_get(array, i))[0], "check element values in array");
Util.tests.c (test\unit):		REQUIRE_EQ(i + 3, ((int*)ccv_array_get(array, i))[0], "check element values in array after clear at index %d", i);
Util.tests.c (test\unit):	REQUIRE_EQ(((int*)ccv_array_get(idx, 1))[0], ((int*)ccv_array_get(idx, 2))[0], "element 2, 3 should in the same group");
Util.tests.c (test\unit):	REQUIRE_EQ(((int*)ccv_array_get(idx, 2))[0], ((int*)ccv_array_get(idx, 3))[0], "element 3, 4 should in the same group");
Util.tests.c (test\unit):	REQUIRE_EQ(((int*)ccv_array_get(idx, 4))[0], ((int*)ccv_array_get(idx, 7))[0], "element 4, 8 should in the same group");
Util.tests.c (test\unit):	REQUIRE_NOT_EQ(((int*)ccv_array_get(idx, 0))[0], ((int*)ccv_array_get(idx, 1))[0], "element 1, 2 should not in the same group");
Util.tests.c (test\unit):	REQUIRE_NOT_EQ(((int*)ccv_array_get(idx, 0))[0], ((int*)ccv_array_get(idx, 4))[0], "element 1, 5 should not in the same group");
Util.tests.c (test\unit):	REQUIRE_NOT_EQ(((int*)ccv_array_get(idx, 0))[0], ((int*)ccv_array_get(idx, 5))[0], "element 1, 6 should not in the same group");
Util.tests.c (test\unit):	REQUIRE_NOT_EQ(((int*)ccv_array_get(idx, 0))[0], ((int*)ccv_array_get(idx, 6))[0], "element 1, 7 should not in the same group");
Util.tests.c (test\unit):	REQUIRE_NOT_EQ(((int*)ccv_array_get(idx, 1))[0], ((int*)ccv_array_get(idx, 4))[0], "element 2, 5 should not in the same group");
Util.tests.c (test\unit):	REQUIRE_NOT_EQ(((int*)ccv_array_get(idx, 1))[0], ((int*)ccv_array_get(idx, 5))[0], "element 2, 6 should not in the same group");
Util.tests.c (test\unit):	REQUIRE_NOT_EQ(((int*)ccv_array_get(idx, 1))[0], ((int*)ccv_array_get(idx, 6))[0], "element 2, 7 should not in the same group");
Util.tests.c (test\unit):	REQUIRE_NOT_EQ(((int*)ccv_array_get(idx, 4))[0], ((int*)ccv_array_get(idx, 5))[0], "element 5, 6 should not in the same group");
Util.tests.c (test\unit):	REQUIRE_NOT_EQ(((int*)ccv_array_get(idx, 4))[0], ((int*)ccv_array_get(idx, 6))[0], "element 5, 7 should not in the same group");
Util.tests.c (test\unit):	REQUIRE_NOT_EQ(((int*)ccv_array_get(idx, 5))[0], ((int*)ccv_array_get(idx, 6))[0], "element 6, 7 should not in the same group");
